name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Decode and verify
      run: |
        echo "Decoding application-secret.yml"
        echo "${{ secrets.SECRET_YML }}" | base64 -d > ./src/main/resources/application-secret.yml

    - name: Build with Gradle
      run: |
          chmod 777 ./gradlew
          ./gradlew clean assemble -x test

    - name: Login to DockerHub
      if: github.event_name == 'push'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker Image
      if: github.event_name == 'push'
      run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }} .
      
    - name: Push Docker Image to Docker Hub
      if: github.event_name == 'push'
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
      
  deploy:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^backendServer"; then
              sudo docker stop backendServer
              sudo docker rm backendServer
            else
              echo "Container backendServer does not exist. Skipping stop and remove."
            fi

      - name: Pull and Deploy Docker Image
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" > .env
            sudo docker-compose --env-file .env -f docker-compose.yml up -d

            
      - name: Check Deploy Server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}/env
          max-attempts: 5
          retry-delay: 10s
      
      - name: Delete Old Docker Image
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            dangling_images=$(sudo docker images -f "dangling=true" -q)
            if [ ! -z "$dangling_images" ]; then
              sudo docker rmi $dangling_images
            else
              echo "No dangling images found"
            fi
